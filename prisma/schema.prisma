// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// NextAuth Schema

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String? @db.Text
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  sets          Set[]
  workouts      Workout[]
  plans         Plan[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Set {
  id String @id @default(cuid())
  date DateTime
  reps Int?
  weight Float?
  addWeight Float?
  subtractWeight Float?
  time DateTime?
  distance Float?
  completed Boolean
  exercise  Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
  workout  Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Exercise {
  id    String @id @default(cuid())
  name  String
  image String?
  video String?
  type String
  sets     Set[]
  workouts Workout[] @relation("ExerciseWorkout")
}

model Workout {
  id    String @id @default(cuid())
  name String
  date DateTime
  save Boolean
  inProgress Boolean
  exercises Exercise[] @relation("ExerciseWorkout")
  sets Set[]
  user  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  plan    Plan?   @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId  String?
}

model Plan {
  id String @id @default(cuid())
  name String
  start DateTime
  duration Int
  current Boolean
  nextWorkoutId String
  workouts Workout[]
  user  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}